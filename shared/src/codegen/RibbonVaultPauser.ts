/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace RibbonVaultPauser {
  export type PauseReceiptStruct = {
    round: BigNumberish;
    shares: BigNumberish;
  };

  export type PauseReceiptStructOutput = [number, BigNumber] & {
    round: number;
    shares: BigNumber;
  };
}

export interface RibbonVaultPauserInterface extends utils.Interface {
  contractName: "RibbonVaultPauser";
  functions: {
    "STETH()": FunctionFragment;
    "STETH_VAULT()": FunctionFragment;
    "WETH()": FunctionFragment;
    "addVault(address)": FunctionFragment;
    "getPausePosition(address,address)": FunctionFragment;
    "keeper()": FunctionFragment;
    "owner()": FunctionFragment;
    "pausePosition(address,uint256)": FunctionFragment;
    "pausedPositions(address,address)": FunctionFragment;
    "processWithdrawal(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resumePosition(address)": FunctionFragment;
    "setNewKeeper(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "STETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "STETH_VAULT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(functionFragment: "addVault", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getPausePosition",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "keeper", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pausePosition",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pausedPositions",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "processWithdrawal",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resumePosition",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setNewKeeper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "STETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "STETH_VAULT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPausePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "keeper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pausePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pausedPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resumePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNewKeeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Pause(address,address,uint256,uint256)": EventFragment;
    "ProcessWithdrawal(address,uint256)": EventFragment;
    "Resume(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pause"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProcessWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Resume"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PauseEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { account: string; vaultAddress: string; share: BigNumber; round: BigNumber }
>;

export type PauseEventFilter = TypedEventFilter<PauseEvent>;

export type ProcessWithdrawalEvent = TypedEvent<
  [string, BigNumber],
  { vaultAddress: string; round: BigNumber }
>;

export type ProcessWithdrawalEventFilter =
  TypedEventFilter<ProcessWithdrawalEvent>;

export type ResumeEvent = TypedEvent<
  [string, string, BigNumber],
  { account: string; vaultAddress: string; withdrawAmount: BigNumber }
>;

export type ResumeEventFilter = TypedEventFilter<ResumeEvent>;

export interface RibbonVaultPauser extends BaseContract {
  contractName: "RibbonVaultPauser";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RibbonVaultPauserInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    STETH(overrides?: CallOverrides): Promise<[string]>;

    STETH_VAULT(overrides?: CallOverrides): Promise<[string]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    addVault(
      _vaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPausePosition(
      _vaultAddress: string,
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<[RibbonVaultPauser.PauseReceiptStructOutput]>;

    keeper(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pausePosition(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pausedPositions(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { round: number; shares: BigNumber }>;

    processWithdrawal(
      _vaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resumePosition(
      _vaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNewKeeper(
      _newKeeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  STETH(overrides?: CallOverrides): Promise<string>;

  STETH_VAULT(overrides?: CallOverrides): Promise<string>;

  WETH(overrides?: CallOverrides): Promise<string>;

  addVault(
    _vaultAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPausePosition(
    _vaultAddress: string,
    _userAddress: string,
    overrides?: CallOverrides
  ): Promise<RibbonVaultPauser.PauseReceiptStructOutput>;

  keeper(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pausePosition(
    _account: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pausedPositions(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<[number, BigNumber] & { round: number; shares: BigNumber }>;

  processWithdrawal(
    _vaultAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resumePosition(
    _vaultAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNewKeeper(
    _newKeeper: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    STETH(overrides?: CallOverrides): Promise<string>;

    STETH_VAULT(overrides?: CallOverrides): Promise<string>;

    WETH(overrides?: CallOverrides): Promise<string>;

    addVault(_vaultAddress: string, overrides?: CallOverrides): Promise<void>;

    getPausePosition(
      _vaultAddress: string,
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<RibbonVaultPauser.PauseReceiptStructOutput>;

    keeper(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pausePosition(
      _account: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pausedPositions(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { round: number; shares: BigNumber }>;

    processWithdrawal(
      _vaultAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resumePosition(
      _vaultAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setNewKeeper(_newKeeper: string, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Pause(address,address,uint256,uint256)"(
      account?: string | null,
      vaultAddress?: string | null,
      share?: null,
      round?: null
    ): PauseEventFilter;
    Pause(
      account?: string | null,
      vaultAddress?: string | null,
      share?: null,
      round?: null
    ): PauseEventFilter;

    "ProcessWithdrawal(address,uint256)"(
      vaultAddress?: string | null,
      round?: null
    ): ProcessWithdrawalEventFilter;
    ProcessWithdrawal(
      vaultAddress?: string | null,
      round?: null
    ): ProcessWithdrawalEventFilter;

    "Resume(address,address,uint256)"(
      account?: string | null,
      vaultAddress?: string | null,
      withdrawAmount?: null
    ): ResumeEventFilter;
    Resume(
      account?: string | null,
      vaultAddress?: string | null,
      withdrawAmount?: null
    ): ResumeEventFilter;
  };

  estimateGas: {
    STETH(overrides?: CallOverrides): Promise<BigNumber>;

    STETH_VAULT(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    addVault(
      _vaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPausePosition(
      _vaultAddress: string,
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keeper(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pausePosition(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pausedPositions(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    processWithdrawal(
      _vaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resumePosition(
      _vaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNewKeeper(
      _newKeeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    STETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STETH_VAULT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addVault(
      _vaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPausePosition(
      _vaultAddress: string,
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pausePosition(
      _account: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pausedPositions(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processWithdrawal(
      _vaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resumePosition(
      _vaultAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNewKeeper(
      _newKeeper: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
